
정렬 알고리즘


* simple, slow
Bubble sort
Insertion sort
Selection sort

* fast
Quick sort
Merge sort
Heap sort

* O(N)
Radix sort


>> Selection Sort

1. 가장 큰 값을 찾는다.
2. 맨 끝자리와 값을 바꾼다. (끝자리는 신경 쓸 필요 없어짐)

<pseudo code - Selection Sort>

selectionSort(A[], n) // 배열 A[1...n]을 정렬한다.
{
    for last <- n downto 2 { ---- (1)
        A[1...last] 중 가장 큰 수 A[k]를 찾는다; ---- (2)
        A[k] <-> A[last]; >> A[k]와 A[last]의 값을 교환 ---- (3)
    }
}

- 실행 시간:
    (1)의 for 루프는 n-1번 반복
    (2)에서 가장 큰 수를 찾기 위한 비교횟수: n-1, n-2, ... , 2,1
    (3)의 교환은 상수시간 작업

- 시간복잡도 T(n) = (n-1) + (n-2) + ... 2 + 1 = O(n^2) // 정확히는 n(n-1)/2 비교연산



>> Bubble Sort

1. 가장 큰 값을 찾는다.
2. 맨 끝자리로 큰 값을 몰아온다.

<pseudo code - Bubble Sort>

bubbleSort(A[], n) // 배열 A[1...n]을 정렬한다.
{
    for last <- n downto 2 { ---- (1)
        for i <- 1 to last-1 ---- (2)
            if (A[i]>A[i+1]) then A[i] <-> A[i+1]; >> 교환 ---- (3)
    }
}

- 실행 시간:
    (1)의 for 루프는 n-1번 반복
    (2)의 for 루프는 각각 n-1, n-2, ..., 2, 1번 반복
    (3)의 교환은 상수시간 작업
    
- 시간복잡도 T(n) = (n-1) + (n-2) + ... + 2 + 1 = O(n^2)



>> Insertion Sort

<pseudo code - Insertion Sort>

InsertionSort(A[], n) // 배열 A[1...n]을 정렬한다.
{
    for i <- 2 to n { ---- (1)
        A[1...i]의 적당한 자리에 A[i]를 삽입한다. ---- (2)
    }
}

- 실행 시간:
    (1)의 for 루프는 n-1번 반복
    (2)의 삽입은 최악의 경우 i-1번 비교
    
- 최악의 경우: T(n) = (n-1) + (n-2) + ... + 2 + 1 = O(n^2)


